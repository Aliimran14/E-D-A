# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kADmu6GhPkCm9S2U_zaACipRvXFBMiLb
"""



"""import and install libraries"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns                       #visualisation
import matplotlib.pyplot as plt             #visualisation
# %matplotlib inline
sns.set(color_codes=True)

"""Loading the dataset"""

df = pd.read_csv("data.csv")
# To display the top 5 rows
df.head(5)
df.tail(5)

"""checking the type of data"""

df.dtypes

"""droping irrelevant columns"""

df = df.drop([ 'Vehicle Size'], axis=1)
df.head(5)

"""Renaming the columns"""

df = df.rename(columns={"Engine HP": "HP", "Engine Cylinders": "Cylinders", "Transmission Type": "Transmission", "Driven_Wheels": "Drive Mode","highway MPG": "MPG-H", "city mpg": "MPG-C", "MSRP": "Price" })
df.head(5)

"""Droping the duplicate rows"""

df.shape
duplicate_rows_df = df[df.duplicated()]
print("number of duplicate rows: ", duplicate_rows_df.shape)
df = df.drop_duplicates()
df.shape

"""counting the numbers of rows"""

df.count()

"""droping the missing or null values"""

print(df.isnull().sum())
df = df.dropna()    # Dropping the missing values.
df.count()
print(df.isnull().sum())   # After dropping the values

"""Detecting outliers"""

sns.boxplot(x=df['Price'])
sns.boxplot(x=df['Price'])
sns.boxplot(x=df['Cylinders'])

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
print(IQR)

"""Correlation of different features"""

df.corr()

"""Plot different features against one another (scatter), against frequency (histogram)"""

df.Make.value_counts().nlargest(15).plot(kind='bar', figsize=(10,5))
plt.title("Price of cars by make")
plt.ylabel('price of cars')
plt.xlabel('Make');



"""Number of Cars vs Make"""

df.Make.value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))
plt.title("Number of cars by make")
plt.ylabel('Number of cars')
plt.xlabel('Make');

"""Data vs the Year"""

df.Year.value_counts().plot(kind='pie')
plt.show()

df.Make.value_counts().nlargest(20).plot(kind='bar', figsize=(15, 10)) # figsize=(15, 10)
plt.title("Number of HP by car")
plt.ylabel('Number of HP')
plt.xlabel('Make');

"""Heat maps"""

# Adjusting the Size of Figure
plt.figure(figsize=(10,5))
# calculating the Correlation
correlation = df.corr()
# Displaying the correlation using the Heap Map
sns.heatmap(correlation,cmap="BrBG",annot=True) # Br: Brown. B: Blue, G: Green

#correlation